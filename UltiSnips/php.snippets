snippet $ "variable assignment"
$${1:varName} = ${2:"value"};
endsnippet

snippet act "Create a default silex action"
/**
 * Resposta a requisição
 *
 * @param Request     $request Requisição HTTP
 * @param Application $app     Aplicação Silex
 *
 * @return null
 */
public function ${1}Action(Request $request, Application $app)
{
	return $app['twig']->render();
}
endsnippet

snippet jact "Create a default silex action with json return"
/**
 * Resposta a requisição /$1
 *
 * @param Request     $request Requisição HTTP
 * @param Application $app     Aplicação Silex
 *
 * @return string Objeto JSON
 */
public function ${1}Action(Request $request, Application $app)
{
	$response = new JsonResponse();
	$response->setData([]);

	return $response;
}
endsnippet

snippet dump "var_dump"
var_dump($${1:var});
endsnippet

snippet jdump "var_dump with json_encode"
var_dump(json_encode($${1:var}, JSON_PRETTY_PRINT));
endsnippet

snippet err "error_log"
error_log($${1:var});
endsnippet

snippet jerr "error_log with json_encode"
error_log(json_encode($${1:var}, JSON_PRETTY_PRINT));
endsnippet

snippet derr "error_log with var_dump"
ob_start(); var_dump($${1:var}); error_log(ob_get_clean());
endsnippet

snippet docc "Symfony Entity attribute with doctrine annotation"
/**
 * @ORM\Column(type="${2:string}"${3:, length=${4:25}}${5:, unique=${6:true}}${7:, nullable=${8:false}})
 *
 * @var ${9:$2}
 */
protected $${1:attr};
endsnippet

snippet doc11 "Symfony Entity attribute with Doctrine association mapping 1-1"
/**
 * @ORM\OneToOne(targetEntity="${1/\w+/\u$0/}")
 * @ORM\JoinColumn(name="${2:$1_id}", referencedColumnName="${3:id}")
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet docn1u "Symfony Entity attribute with Doctrine association mapping N-1 Unidirectional"
/**
 * @ORM\ManyToOne(targetEntity="${1/\w+/\u$0/}")
 * @ORM\JoinColumn(name="${2:$1_id}", referencedColumnName="${3:id}")
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet docnnu "Symfony Entity attribute with Doctrine association mapping N-N Unidirectional"
/**
 * @ORM\ManyToMany(targetEntity="${1/\w+/\u$0/}")
 * @ORM\JoinTable(name="${2:associative_table}"
 *     joinColumns={@ORM\JoinColumn(name="${3:ours_id}", referencedColumnName="${4:id}")}
 *     inverseJoinColumns={@ORM\JoinColumn(name="${5:$1_id}", referencedColumnName="${6:id}")}
 *     )
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet docmnn "Symfony Entity attribute with Doctrine association mapping N-N Bidirectional Owned Side"
/**
 * @ORM\ManyToMany(targetEntity="${2:${1/\w+/\u$0/}}", mappedBy="${3:${1/\w+/\u$0/}::targetAttr}"${4:, cascade={${5:"all"}}})
 *
 * @var Doctrine\Common\Collections\ArrayCollection
 */
protected $${1:attr};
endsnippet

snippet docinn "Symfony Entity attribute with Doctrine association mapping N-N Bidirectional Owner Side"
/**
 * @ORM\ManyToMany(targetEntity="${2:${1/\w+/\u$0/}}", inversedBy="${3:${1/\w+/\u$0/}::targetAttr}")
 * @ORM\JoinTable(name="${4:associative_table}")
 *
 * @var Doctrine\Common\Collections\ArrayCollection
 */
protected $${1:attr};
endsnippet

snippet doc1n "Symfony Entity attribute with Doctrine association mapping 1-N Bidirectional Owned Side"
/**
 * @ORM\OneToMany(targetEntity="${1/\w+/\u$0/}", mappedBy="${2:${1/\w+/\u$0/}::targetAttr}"${3:, cascade={${4:"all"}}})
 *
 * @var Doctrine\Common\Collections\ArrayCollection
 */
protected $${1:attr};
endsnippet

snippet docn1 "Symfony Entity attribute with Doctrine association mapping N-1 Bidirectional Owner Side"
/**
 * @ORM\ManyToOne(targetEntity="${1/\w+/\u$0/}", inversedBy="${2:${1/\w+/\u$0/}::targetAttr}")
 * @ORM\JoinColumn(name="${3:$1_id}", referencedColumnName="${4:id}")
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet docm11 "Symfony Entity attribute with Doctrine association mapping 1-1 Bidirectional Owned Side"
/**
 * @ORM\OneToOne(targetEntity="${1/\w+/\u$0/}", mappedBy="${2:${1/\w+/\u$0/}::targetAttr}"${3:, cascade={${4:"all"}}})
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet doci11 "Symfony Entity attribute with Doctrine association mapping 1-1 Bidirectional Owner Side"
/**
 * @ORM\OneToOne(targetEntity="${1/\w+/\u$0/}", inversedBy="${2:${1/\w+/\u$0/}::targetAttr}")
 * @ORM\JoinColumn(name="${3:$1_id}", referencedColumnName="${4:id}")
 *
 * @var ${1/\w+/\u$0/}
 */
protected $${1:attr};
endsnippet

snippet sfixture "Symfony Fixture"
<?php
namespace ${2:AppBundle}\DataFixtures\ORM;

use $2\Entity\\$1;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Common\Persistence\ObjectManager;

/**
 * Class $1Fixtures
 */
class ${1:Entity}Fixtures extends Fixture
{
	public function load(ObjectManager $manager)
	{
		${3}
	}

	/**
	public function getDependencies()
	{
		return [];
	}
	*/
}
endsnippet

snippet sentity "Symfony Entity"
<?php

namespace ${2:AppBundle}\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Table(name="${3:${1/\w+/\L$0\E/}}")
 * @ORM\Entity(repositoryClass="$2\Repository\\$1Repository")
 *
 * $1
 */
class ${1:Entity} implements \Serializable
{
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 *
	 * @var integer
	 */
	protected $id;

	/**
	 * $1 ctor
	 */
	public function __contruct()
	{
	}

	/**
	 * Get id
	 *
	 * @return integer
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * @see \Serializable::serialize()
	 */
	public function serialize()
	{
		return serialize(
			[
				$this->id
			]
		);
	}

	/**
	 * @see \Serializable::unserialize()
	 */
	public function unserialize($serialized)
	{
		list(
			$this->id
		) = unserialize($serialized);
	}
}
endsnippet

snippet srepository "Symfony Repository"
<?php

namespace ${2:AppBundle}\Repository;

/**
 * $1Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ${1:Entity}Repository extends \Doctrine\ORM\EntityRepository
{
}
endsnippet

snippet lnotification "Laravel notification class"
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;

class ${1:Notification} extends Notification
{
	use Queueable;

	/**
	 * Create a new notification instance.
	 *
	 * @return void
	 */
	public function __construct()
	{
		${2://}
	}

	/**
	 * Get the notification's delivery channels.
	 *
	 * @param  mixed  $notifiable
	 * @return array
	 */
	public function via($notifiable)
	{
		return ['mail'];
	}

	/**
	 * Get the mail representation of the notification.
	 *
	 * @param  mixed  $notifiable
	 * @return \Illuminate\Notifications\Messages\MailMessage
	 */
	public function toMail($notifiable)
	{
		return (new MailMessage)->line('The introduction to the notification.')
			->action('Notification Action', url('/'))
			->line('Thank you for using our application!');
	}

	/**
	 * Get the array representation of the notification.
	 *
	 * @param  mixed  $notifiable
	 * @return array
	 */
	public function toArray($notifiable)
	{
		return [
			//
		];
	}
}
endsnippet

snippet levent "Laravel Event"
<?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

class ${1:Event}
{
	use Dispatchable, InteractsWithSockets, SerializesModels;

	/**
	 * Create a new event instance.
	 *
	 * @return void
	 */
	public function __construct()
	{
		//
	}

	/**
	 * Get the channels the event should broadcast on.
	 *
	 * @return \Illuminate\Broadcasting\Channel|array
	 */
	public function broadcastOn()
	{
		return new PrivateChannel('${2:channel-name}');
	}
}
endsnippet

snippet llistener "Laravel Event Listener"
<?php

namespace App\Listeners;

use App\Events\\$1;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;

class ${1:Event}Listener
{
	/**
	 * Create the event listener.
	 *
	 * @return void
	 */
	public function __construct()
	{
	}

	/**
	 * Handle the event.
	 *
	 * @param  $1 $event
	 *
	 * @return void
	 */
	public function handle($1 $event)
	{
	}
}
endsnippet

snippet lsubscriber "Laravel Event Subscriber"
<?php

namespace App\Listeners;

class ${1:Event}Subscriber
{
	/**
	 * Register the listeners for the subscriber
	 *
	 * @param Illuminate\Events\Dispatcher $events
	 *
	 * @return void
	 */
	public function subscribe($events)
	{
		$events->listen(
			'App\Events\\${2:Event}',
			'App\Listeners\\$1Subscriber@${3:myEventListener}'
		);
	}
}
endsnippet
